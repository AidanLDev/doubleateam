---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import { Breadcrumbs, BreadcrumbsItem } from 'accessible-astro-components'
import { type CollectionEntry, getCollection } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getCollection('blog')
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }))
}
type BlogProps = CollectionEntry<'blog'>
type Props = BlogProps & { title?: string; tags?: string[] }

const post = Astro.props
const { Content } = await post.render()
---

<DefaultLayout title={post.data.title} description={post.body} url={post.data.title}>
  <div class="overlay"></div>
  <div class="container">
    <div class="mt-12">
      <Breadcrumbs>
        <BreadcrumbsItem href="/" label="Home" />
        <BreadcrumbsItem href="/posts" label="Posts" />
        <BreadcrumbsItem currentPage={true} label={post.data.title} />
      </Breadcrumbs>
    </div>
  </div>
  <section class="my-12">
    <div class="container">
      <h1>{post.title}</h1><br />
      <img src={post.data.heroImage} alt={post.data.title} class="main-blog-img mb-3 rounded-3xl" />
      <p>Published: {post.data.pubDate}</p>
    </div>
  </section>
  <section class="my-12">
    <div class="blog-container container">
      <Content />
    </div>
  </section>
</DefaultLayout>

<style lang="scss">
  ul {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 4rem;

    @media (min-width: 550px) {
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 2rem;
    }

    @media (min-width: 950px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 998;
    opacity: 0;
    visibility: hidden;
    transition: all 0.5s ease;

    &.active {
      opacity: 1;
      visibility: visible;
    }
  }
</style>

<script>
  const blogImages = document.querySelectorAll('.blog-container img')
  const overlay = document.querySelector('.overlay')

  // Add click event to each image
  blogImages.forEach((img) => {
    img.addEventListener('click', (event) => {
      const eventTarget = event.target as Element
      eventTarget.classList.toggle('enlarged')
      overlay.classList.toggle('active')
    })
  })

  // Remove 'enlarged' class when clicking anywhere else
  document.addEventListener('click', (event) => {
    const eventTarget = event.target as Element
    if (!eventTarget.closest('.blog-container img')) {
      blogImages.forEach((img) => {
        img.classList.remove('enlarged')
      })
      overlay.classList.remove('active')
    }
  })

  document.addEventListener('keydown', (event) => {
    const { key } = event
    if (key.toLowerCase() === 'escape') {
      blogImages.forEach((img) => {
        img.classList.remove('enlarged')
      })
      overlay.classList.remove('active')
    }
  })
</script>
